{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","model","preview","predictions","onDrop","accepted","rejected","links","setState","onImageChange","e","classify","target","then","mobilenet","className","this","accept","multiple","alt","onLoad","src","map","item","key","probability","toFixed","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","id","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oXAwEeA,G,kNA/DbC,MAAQ,CACNC,MAAO,KACPC,QAAS,GACTC,YAAa,I,EAWfC,OAAS,SAACC,EAAUC,EAAUC,GAC5B,EAAKC,SAAS,CAAEN,QAASG,EAAS,GAAGH,SAAWK,EAAM,M,EAGxDE,cAAgB,SAACC,GACf,EAAKV,MAAMC,MAAMU,SAASD,EAAEE,QAAQC,MAAK,SAACV,GACxC,EAAKK,SAAS,CAAEL,YAAaA,Q,kEAdZ,IAAD,OAClBW,MAAiBD,MAAK,SAACZ,GACrB,EAAKO,SAAS,CACZP,MAAOA,S,+BAgBX,OACE,yBAAKc,UAAU,iBACZC,KAAKhB,MAAMC,MACV,kBAAC,IAAD,CACEc,UAAU,WACVE,OAAO,2CACPC,UAAU,EACVd,OAAQY,KAAKZ,QAEb,yBAAKW,UAAU,oBACZC,KAAKhB,MAAME,QACV,yBACEiB,IAAI,iBACJC,OAAQJ,KAAKP,cACbM,UAAU,eACVM,IAAKL,KAAKhB,MAAME,UAGlB,2BAKN,yBAAKa,UAAU,YAAf,oBAEF,yBAAKA,UAAU,WACZC,KAAKhB,MAAMG,YAAYmB,KAAI,SAACC,GAAD,OAC1B,yBAAKR,UAAU,aAAaS,IAAKD,EAAKR,WACpC,6BAAMQ,EAAKR,WACX,6BAAMQ,EAAKE,YAAYC,QAAQ,c,GAvD3BC,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAKC,GAAG,gBACN,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c35b77d4.chunk.js","sourcesContent":["import React from 'react';\nimport MagicDropzone from \"react-magic-dropzone\";\nimport './App.css';\n\n\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport * as tf from \"@tensorflow/tfjs-backend-cpu\";\n\nclass App extends React.Component {\n  state = {\n    model: null,\n    preview: \"\",\n    predictions: []\n  };\n\n  componentDidMount() {\n    mobilenet.load().then((model) => {\n      this.setState({\n        model: model\n      });\n    });\n  }\n\n  onDrop = (accepted, rejected, links) => {\n    this.setState({ preview: accepted[0].preview || links[0] });\n  };\n\n  onImageChange = (e) => {\n    this.state.model.classify(e.target).then((predictions) => {\n      this.setState({ predictions: predictions });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Dropzone-page\">\n        {this.state.model ? (\n          <MagicDropzone\n            className=\"Dropzone\"\n            accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\n            multiple={false}\n            onDrop={this.onDrop}\n          >\n            <div className=\"Dropzone-content\">\n              {this.state.preview ? (\n                <img\n                  alt=\"upload preview\"\n                  onLoad={this.onImageChange}\n                  className=\"Dropzone-img\"\n                  src={this.state.preview}\n                />\n              ) : (\n                \"Choose or drop a file.\"\n              )}\n            </div>\n          </MagicDropzone>\n        ) : (\n          <div className=\"Dropzone\">Loading model...</div>\n        )}\n        <div className=\"results\">\n          {this.state.predictions.map((item) => (\n            <div className=\"prediction\" key={item.className}>\n              <div>{item.className}</div>\n              <div>{item.probability.toFixed(2)}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div id=\"particles-js\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}